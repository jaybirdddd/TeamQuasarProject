:: StoryTitle
Keep Talking and The Ship Doesn_t Explode v0.40


:: StoryData
{
  "ifid": "26707158-3609-4AB7-9F63-6FC214FB02C7",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Back to Menu",
  "zoom": 0.6
}


:: ASTRONAUT {"position":"1400,800","size":"100,100"}
<center>WELCOME ASTRONAUT</center>

<center>Your spacecraft is facing numerous malfunctions that is in need of repair</center>
<center>The only way to fix the spacecraft is to ask your flight controller on how to solve these problems</center>
<center>Your goal is to provide clear communication with your flight controllers to obtain the correct answers to restore your spacecraft into safe conditions</center>
<center>Every incorrect action may cause the countdown timer to deduct a couple of seconds. </center>
<center>NOTE!!!</center><center>MAKE SURE YOUR FLIGHT CONTROLLER IS READY TO OPEN THEIR MANUAL BEFORE STARTING THE GAME</center>

<center>[[BEGIN MISSION|Meeting Room]]</center>
<center>[[WAIT I HATE MY JOB, GO BACK|BEGIN MISSION]]</center>


:: Air Lock {"position":"1850,750","size":"100,100"}
<<include "Gameplay Rules">>
<center>AIRLOCK ROOM</center>
<center><img src="https://scalar.chapman.edu/scalar/interior-space---a-visual-exploration-of-the-international-space-station-photographs-by-paolo-nespo/media/Quest%20Airlock%20from%20Node1.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
     <td>Dead End</td>
    <td style="text-align: center;">[[Mess Hall]]</td>
     <td style="text-align: right;">Dead End</td>
  </tr>
</table>


:: Antenna Repair {"position":"850,1100","size":"100,100"}
''ANTENNA REPAIR''
//Antennas in spacecrafts are crucial to transmit and communicate with flight controllers to send and receive important data and valuable information. 

//Antenna will be in need of repair if its damaged, broken, or facing limited or delayed communications.//

//Antenna repairs will require spacewalk and may cause death//

[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: Astronaut Incorrect Screen {"position":"1000,400","size":"100,100"}
<<silently>><<set $strikes to $strikes - 1>><</silently>>
<<include "Timer">>
<<include "Strikes">>
<<silently>><<include "Victory Check">><</silently>>
<center>
  INCORRECT CHOICE<br>
  YOU QUICKLY COMMUNICATE WITH YOUR CONTROLLER AGAIN<br><br>
  </center>

<center>
  <<timed 3s>>
  <<if $backToPuzzle == "Toilet Puzzle">>
    <<goto "Toilet Puzzle">>
    
<<elseif $backToPuzzle == "Water Puzzle1">>
    <<goto "Water Recycling Machine Puzzle 1/2">>
    
<<elseif $backToPuzzle == "Water Puzzle2">>
    <<goto "Water Recycling Machine Puzzle 2/2">>
    
<<elseif $backToPuzzle == "Satellite Puzzle">>
    <<goto "Satellite Adjustment">>
    
<<elseif $backToPuzzle == "Stars Puzzle">>
    <<goto "StarFix: ASTR Seed">>
    
<</if>>
<</timed>></center>




:: BEGIN MISSION {"position":"525,600","size":"100,100"}
<center>CHOOSE YOUR ROLE</center>

<center>[[ASTRONAUT]]</center>

<center>[[FLIGHT CONTROLLER]]</center>


:: Back to Menu {"position":"100,600","size":"100,100"}
<center>KEEP TALKING AND THE SHIP DOESN'T EXPLODE</center>

<center><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/The_station_pictured_from_the_SpaceX_Crew_Dragon_1.jpg/1024px-The_station_pictured_from_the_SpaceX_Crew_Dragon_1.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>

<center>[[Start Game]]</center>
<<silently>>
<<include "StoryInit">>
<</silently>>


:: Command Center {"position":"2000,600","size":"100,100"}
<<nobr>><<include "Gameplay Rules">>
<<silently>><<include "Victory Check">><</silently>>
<center>COMMAND CENTER ROOM</center>
<center><img src="https://www.esa.int/var/esa/storage/images/esa_multimedia/images/2014/10/space_station_office/15002125-1-eng-GB/Space_Station_office_pillars.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
    <td>[[Mess Hall]]</td>
    <td style="text-align: center;">Dead End</td>
    <td style="text-align: right;">Dead End</td>
  </tr>
</table>
<<if $satelliteComplete is false>><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT8LoiUwLYsWvKKRaTFvXVwZz2V6gisuccx9A&s" width="30" height="30"  alt="Placeholder Title Image" /><a class="yellow-link" data-passage="Satellite Adjustment">Adjust Satellites</a><</if>><<endnobr>>
<<if $computerComplete is false>><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzCD2Eh1uRqEcbxFcWCJJEPIPSZ0MY0JwMiA&s" width="30" height="30"  alt="Placeholder Title Image" /><a class="yellow-link" data-passage="Computer Rebooting">Computer Failure Reboot</a><</if>>
<<if $starsComplete is false>><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQI6RCfXS03bJcGHvwm5pdSZTJLyKE21vZfuw&s" width="30" height="30"  alt="Placeholder Title Image" /><a class="yellow-link" data-passage="StarFix: ASTR Seed">StarFix（Astronaut）</a><</if>>
<<if $satelliteComplete is true>><span id="completed-text">Completed Satellite Adjustment!</span><</if>>
<<if $starsComplete is true>><span id="completed-text">Completed Stars Adjustment!</span><</if>>
<<if $computerComplete is true>><span id="completed-text">Completed Computer Reboot!</span><</if>>


:: Computer Failure {"position":"700,1100","size":"100,100"}
''COMPUTER FAILURE''
//Computers in spacecrafts are essentials to perform important tasks for your mission, like navigation, communication, data management, research, and other forms of scientific research and exploration, along with activating oxygen production, carbon dioxide scrubber, and other control systems to create a suitable environment for your crew.

//Computer failure can be caused by software bugs, damaged electrical equipments, or space radiation.//

//Below are the answers for the astronaut to reboot the computer to negate the computer failure

//Your astronaut should read out the code they are seeing. Any asterisks that they are seeing are empty charactes that are needed to reboot the computer. Use the letters the astronaut reported to identify the correct code from the set of possible codes.

*<span id="warning-text">$ahouston</span>
*<span id="warning-text">$aorlando</span>
*<span id="warning-text">$abarstow</span>
*<span id="warning-text">$ahampton</span>

[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>
<<silently>>
<<timed 7s>>
	<<goto "Correct Computer Code">>
<</if>>
<</timed>>
<<set $ahouston = $houstonArr.random()>>
<<set $aorlando = $orlandoArr.random()>>
<<set $abarstow = $barstowArr.random()>>
<<set $ahampton = $hamptonArr.random()>>
<</silently>>



:: Computer Rebooting {"position":"2100,450","size":"100,100"}
<<include "Gameplay Rules">>

Enter the correct code to fully restart the computer. You must provide detailed information of what you are seeing to your controller in order for them to give you the answer to restart.

//Please provide the letters you are seeing to the controller. They can NOT reveal the answer to you without it.
//NOTE: CASE SENSITIVE 
//NOTE: DO NOT SPACE OUT THE CODE
//WARNING: INCORRECTLY ENTERING THE CODE WILL RESULT IN A GAME OVER
<div class="ui-card">
<<if $computerCorrect == "HOUSTON">>
	<center><h1 id="win-text"><<=$mhouston>></h1></center>
<<elseif $computerCorrect == "ORLANDO">>
	<center><h1 id="win-text"><<=$morlando>></h1></center>
<<elseif $computerCorrect == "BARSTOW">>
	<center><h1 id="win-text"><<=$mbarstow>></h1></center>
<<elseif $computerCorrect == "HAMPTON">>
	<center><h1 id="win-text"><<=$mhampton>></h1></center>
<</if>>

Enter Reboot Code:<<textbox "$computerFailureUserInput" "" >><<button "Enter">>
<<if $computerFailureUserInput == $computerCorrect>>
	<<goto "Command Center">>
    <<set $computerComplete to true>>
    <<set $completedPuzzles to $completedPuzzles + 1>>
<<else>>
	<<goto "Game Over">>
<</if>><</button>>
</div>

[[BACK|Command Center]]



:: Controller Error Screen {"position":"400,825","size":"100,100"}
<<set _psg to either('Solar Panel Repairs', 'Computer Failure', 'Antenna Repair', 'Toilet Repair', 'Radiation Shield Failure')>>

<center>
  RESTARTING COMPUTER<br>
  PLEASE BE EXTREMELY PATIENT<br>
  WE WILL "TRY" TO REMEMBER WHERE YOU LEFT OFF<br><br>
  </center>

<center>
  <<timed 3s>><<link 'Turn on Computer'>>
    <<goto _psg>>
  <</link>>
<</timed>></center>
<<set $manualSeconds to random(100,150)>>


:: Correct Altitudes Screen {"position":"400,1250","size":"100,100"}
<<= setSatellites($sat_seed)>>

// Below are the correct altitudes for the four satellites:

SATELLITE 1 - <span id="satval1">$correct1 km</span>
SATELLITE 2 - <span id="satval2">$correct2 km</span>
SATELLITE 3 - <span id="satval3">$correct3 km</span>
SATELLITE 4 - <span id="satval4">$correct4 km</span>

// Relay the above information to your astronaut. 

[[BACK|Satellite Realignment]]


:: Correct Computer Code {"position":"700,1250","size":"100,100"}
''COMPUTER FAILURE''
//Computers in spacecrafts are essentials to perform important tasks for your mission, like navigation, communication, data management, research, and other forms of scientific research and exploration, along with activating oxygen production, carbon dioxide scrubber, and other control systems to create a suitable environment for your crew.

//Computer failure can be caused by software bugs, damaged electrical equipments, or space radiation.//

//Below are the answers for the astronaut to reboot the computer to negate the computer failure

//Your astronaut should read out the code they are seeing. Any asterisks that they are seeing are empty charactes that are needed to reboot the computer. Use the letters the astronaut reported to identify the correct code from the set of possible codes.

*<span id="completed-text">HOUSTON</span>
*<span id="completed-text">ORLANDO</span>
*<span id="completed-text">BARSTOW</span>
*<span id="completed-text">HAMPTON</span>

BACK BUTTON DISABLED
<<include 'Manual Timer'>>
<<silently>>
<<timed 0.35s>>
    <<goto "Computer Failure">>
<</timed>>
<</silently>>


:: Dorm Toilet {"position":"1850,325","size":"100,100"}
<<nobr>><<silently>><<if $toiletComplete is true>><<set $completedPuzzles to $completedPuzzles + 1>><</if>><</silently>>
<<include "Gameplay Rules">>
<center>DORMITORY TOILET</center>
<center><img src="
https://blog.museumofflight.org/hubfs/Space%20toilet1.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr> <td style="text-align: center;">[[Dormitory]]</td> </tr> </table> 
<<if $toiletComplete is false>><a class="yellow-link" data-passage="Toilet Puzzle"> Check Toilet Repair</a><</if>>

<<if $toiletComplete is true>><span id="completed-text">Completed Toilet Repair!</span><<unset $toiletComplete>><</if>><<endnobr>>


:: Dormitory {"position":"1850,450","size":"100,100"}
<<nobr>><<include "Gameplay Rules">>
<<silently>><<include "Victory Check">><</silently>>
<center>DORMITORY</center>
<center><img src="
https://scx2.b-cdn.net/gfx/news/hires/2023/a-good-nights-sleep-in.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 85%;">
  <tr>
    <td>[[Life Support]]</td>
     <td style="text-align: center;">[[Dorm Toilet]]</td>
    <td style="text-align: right;">Dead End</td>
  </tr>
</table>
<center>[[Mess Hall]]</center><<endnobr>>


:: Engine {"position":"1325,600","size":"100,100"}
<<include "Gameplay Rules">>
<center>ENGINE ROOM</center>
<center><img src="https://cdn2.unrealengine.com/body1-iss-space-explorers-spotlight-1920x1080-cba01dce33fe.jpg?resize=1&w=1920" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
    <td>Dead End</td>
    <td style="text-align: center;">Dead End</td>
    <td style="text-align: right;">[[Hallway]]</td>
  </tr>
</table>



:: FIX FROM INSIDE {"position":"1275,1350","size":"100,100"}
// (instructions on how to fix from the inside)

<<print either("hub", "ble")>>

[[BACK|Radiation Shield Failure]]
<<include 'Manual Timer'>>


:: FIX FROM OUTSIDE {"position":"1325,1225","size":"100,100"}
// (instructions on how to fix on the outside, likely requires spacewalk)

[[BACK|Radiation Shield Failure]]
<<include 'Manual Timer'>>


:: FLIGHT CONTROLLER {"position":"650,700","size":"100,100"}
<center>WELCOME FLIGHT CONTROLLER</center>
<center>Your spacecraft is facing numerous malfunctions that is in need of repair</center>
<center>The only way to fix the spacecraft is to provide directions for your astronaut to solve these problems</center>
<center>Your goal is to provide clear communication and instructions with your astronaut to restore the spacecraft into safe conditions</center>
<center>Your manual may randomly restart on their own in different intervals as the game progresses</center>
<center>NOTE!!!</center><center>MAKE SURE YOUR ASTRONAUT IS READY TO START THE GAME</center>


<center>[[OPEN MANUAL]]</center>
<center>[[WAIT I HATE MY JOB, GO BACK|BEGIN MISSION]]</center>


:: Game Over {"position":"300,200","size":"100,100"}
<center><h1 id="lose-text">Game Over...</h1></center>

<center>Your spacecraft exploded and you must pretend that you are dead and  exploded into a million pieces to tell your flight commander that the game is over</center>
<center>And if you are playing solo, I beg you to please get a homie to play with you, you rule breaker</center>


<center>[[Back to Menu]]</center>


:: Gameplay Rules {"position":"50,1425","size":"100,100"}
<<include "Timer">><<include "Strikes">>
<<include "Victory Check">>


:: Hallway {"position":"1500,600","size":"100,100"}
<<nobr>><<include "Gameplay Rules">>
<center>HALLWAY</center>
<center><img src="https://www.nasa.gov/wp-content/uploads/2021/02/sts_98_destiny_on_fd5_feb_11_2001_s98e5113.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
    <td>[[Engine]]</td>
    <td style="text-align: center;">Dead End</td>
    <td style="text-align: right;">[[Life Support]]</td>
  </tr>
</table>
<table style="width: 100%;">
  <tr>
    <td style="text-align: right;">[[Meeting Room]]</td>
  </tr>
</table>
<<endnobr>>


:: Life Support {"position":"1700,450","size":"100,100"}
<<nobr>><<include "Gameplay Rules">>
<center>LIFE SUPPORT</center>
<center><img src="https://img.freepik.com/premium-photo/hospital-room-featuring-bed-range-essential-medical-equipment-scifi-medical-room-space-vessel-ai-generated_538213-38852.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
    <td>[[Hallway]]</td>
    <td style="text-align: center;">[[Meeting Room]]</td>
    <td style="text-align: right;">[[Dormitory]]</td>
  </tr>
</table>
<table style="width: 100%;">
  <tr>
    <td style="text-align: right;">[[Mess Hall]]</td>
  </tr>
</table><<endnobr>>


:: Manual Timer {"position":"50,1100","size":"100,100"}
<<silently>>
	<<repeat 1s>>
		<<set $manualSeconds to $manualSeconds - 1>>
		<<if $manualSeconds lte 0>>
			<<goto 'Controller Error Screen'>>
			<<stop>>
		<</if>>
	<</repeat>>
<!-- This sample code was take from Twine SugarCube: Timed Passage with modifications-->
<</silently>>


:: Meeting Room {"position":"1700,600","size":"100,100"}
<<include "Gameplay Rules">>
<center>MEETING ROOM</center>
<center><img src="https://static01.nyt.com/images/2020/10/30/science/00SCI-OUTTHERE-SCENES12/00SCI-OUTTHERE-SCENES12-mediumSquareAt3X.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
    <td>[[Hallway]]</td>
    <td style="text-align: center;">[[Life Support]]</td>
    <td style="text-align: right;">[[Mess Hall]]</td>
  </tr>
</table>


:: Mess Hall {"position":"1850,600","size":"100,100"}
<<nobr>><<silently>><<if $waterComplete is true>><<set $completedPuzzles to $completedPuzzles + 1>><</if>><</silently>>
<<include "Gameplay Rules">>
<<silently>><<include "Victory Check">><</silently>>
<center>MESS HALL</center>
<center><img src="https://cdn.zmescience.com/wp-content/uploads/2014/11/table.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>
<table style="width: 100%;">
  <tr>
    <td>[[Life Support]]</td>
    <td style="text-align: center;">[[Dormitory]]</td>
    <td style="text-align: right;">[[Command Center]]</td>
  </tr>
</table>
<table style="width: 55%;">
  <tr>
    <td>[[Meeting Room]]</td>
    <td style="text-align: center;">[[Air Lock]]</td>
  </tr>
</table>
<<if $waterComplete is false>><img src="https://png.pngtree.com/png-vector/20190319/ourmid/pngtree-vector-water-recycle-icon-png-image_845702.jpg" width="30" height="30"  alt="Placeholder Title Image" /><a class="yellow-link" data-passage="Water Recycling Machine Puzzle 1/2">Check Water Recovery Repair</a><</if>>
<<if $waterComplete is true>><span id="completed-text">Completed Water Recycling Machine Repair!</span><<unset $waterComplete>><</if>><<endnobr>>


:: OPEN MANUAL {"position":"650,825","size":"100,100"}
CHECKLIST:
* Satellite Adjustment (Located in Command Center in far right)
* Toilet Repair	(Located in Dormitory in upper ship)
* Water Recycling Repair (Located in Mess Hall)
* StarFix (Stars Constellation) Realignment (Located in Command Center in far right)
* Computer Failure (Located in Command Center in far right)
TABLE OF CONTENTS

[[Antenna Repair]]   		<!-- COMING SOON?-->

[[Computer Failure]]    	<!-- COMING SOON?-->

[[Oxygen Leak]]

[[Radiation Shield Failure]]

[[Satellite Realignment]]

[[Solar Panel Repairs]]		<!-- COMING SOON?-->

[[StarFix（Flight Controller）|StarFix: HOU Seed]]

[[Toilet Repair]] 

[[Water Recycling Machine Repair]] 

<<include 'Manual Timer'>>


:: Oxygen Leak {"position":"250,1100","size":"100,100"}
''OXYGEN LEAK REPAIR''
//Oxygen is vital in any existing spacecraft for your crew, using machines like oxygen generators, pressurized oxygen tanks, or oxygen candles to produce oxygen//
//Solar panels and a water recycling machine are also required to power the oxygen machines, in order to conduct electrolysis to make hydrogen and oxygen out of water.//

//Oxygen leaks can happen if the vacuume jumper hose malfunctioned that show signs of small tears that will require replacements, limited amount of electricity to power the oxygen machine, or the oxygen machine malfunctioned.//

[[BACK|OPEN MANUAL]]

<<include 'Manual Timer'>>


:: Proceed {"position":"400,600","size":"100,100"}
<center>This is a placeholder text to talk about the lore of the game.</center>
<center>I don't know the story, but I heard that it will be insanely epic.</center>
<center>Where will we go, who knows? What problems will we face? Who knows?</center>

<center>Something something something just start game.</center>

<center><span id="begin-button">[[BEGIN MISSION]]</span></center>


:: Radiation Shield Failure {"position":"1300,1100","size":"100,100"}
//Radiation shielding is important for keeping a space station safe from solar radiation. This radiation can seriously damage a ship and its components, so thin aluminum coating is required to keep all systems stable and running.

Other materials can be used such as water or plastic. NASA uses a hybrid carbon/metal fabric to shield their space stations and other spacecraft. 

Radiation shielding can be fixed either from the inside or the outside.

[[FIX FROM INSIDE]]
[[FIX FROM OUTSIDE]]

[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: Random Puzzle {"position":"1700,100","size":"100,100"}
<<include "Timer">>

Computer Failure Puzzle

<<link "WRONG ANSWER">>
    <<set $seconds -= 10>>
    <<goto "Begin Game">>
<</link>>

[[RIGHT ANSWER|Victory Screen]]


:: SATELLITE Alpha {"position":"1825,975","size":"100,100"}
<center><h1>Satellite 1</h1></center>

<center><h2 id="altitude">Current Altitude: $input1 km</h2></center>

Move this satellite to the correct altitude!

<<if $satellite1>>
    <span class="status-text">Satellite Altitude: </span><span id="s1">Nominal</span>
    <<else>>
    <span class="status-text">Satellite Altitude: </span><span id="s1">Incorrect</span>
<</if>>

<<textbox "$input1" "" autofocus>><<button "Move Satellite">>
    <<replace "#altitude">>Current Altitude: $input1 km<</replace>>
	<<if [String($correct1)].includes($input1.toLowerCase())>>
    	<<replace "#s1">>Nominal<</replace>>
		<<set $status1 to true>>
        <<set $satellite1 to true>>
	<<else>>
    	<<replace "#s1">>Incorrect<</replace>>
		<<set $status1 to false>>
        <<set $satellite1 to false>>
        <<goto "Astronaut Incorrect Screen">>
    <</if>>
<</button>>

[[BACK|Satellite Adjustment]]


:: SATELLITE Beta {"position":"1950,975","size":"100,100"}
<center><h1>Satellite 2</h1></center>

<center><h2 id="altitude">Current Altitude: $input2 km</h2></center>

Move this satellite to the correct altitude!

<<if $satellite2>>
    <span class="status-text">Satellite Altitude: </span><span id="s2">Nominal</span>
    <<else>>
    <span class="status-text">Satellite Altitude: </span><span id="s2">Incorrect</span>
<</if>>

<<textbox "$input2" "" autofocus>><<button "Move Satellite">>
    <<replace "#altitude">>Current Altitude: $input2 km<</replace>>
	<<if [String($correct2)].includes($input2.toLowerCase())>>
    	<<replace "#s2">>Nominal<</replace>>
		<<set $status2 to true>>
        <<set $satellite2 to true>>
	<<else>>
    	<<replace "#s2">>Incorrect<</replace>>
		<<set $status2 to false>>
        <<set $satellite2 to false>>
        <<goto "Astronaut Incorrect Screen">>
    <</if>>
<</button>>

[[BACK|Satellite Adjustment]]


:: SATELLITE Delta {"position":"2200,975","size":"100,100"}
<center><h1>Satellite 4</h1></center>

<center><h2 id="altitude">Current Altitude: $input4 km</h2></center>

Move this satellite to the correct altitude!

<<if $satellite4>>
    <span class="status-text">Satellite Altitude: </span><span id="s4">Nominal</span>
    <<else>>
    <span class="status-text">Satellite Altitude: </span><span id="s4">Incorrect</span>
<</if>>

<<textbox "$input4" "" autofocus>><<button "Move Satellite">>
    <<replace "#altitude">>Current Altitude: $input4 km<</replace>>
	<<if [String($correct4)].includes($input4.toLowerCase())>>
    	<<replace "#s4">>Nominal<</replace>>
		<<set $status4 to true>>
        <<set $satellite4 to true>>
	<<else>>
    	<<replace "#s4">>Incorrect<</replace>>
		<<set $status4 to false>>
        <<set $satellite4 to false>>
        <<goto "Astronaut Incorrect Screen">>
    <</if>>
<</button>>

[[BACK|Satellite Adjustment]]


:: SATELLITE Gamma {"position":"2075,975","size":"100,100"}
<center><h1>Satellite 3</h1></center>

<center><h2 id="altitude">Current Altitude: $input3 km</h2></center>

Move this satellite to the correct altitude!

<<if $satellite3>>
    <span class="status-text">Satellite Altitude: </span><span id="s3">Nominal</span>
    <<else>>
    <span class="status-text">Satellite Altitude: </span><span id="s3">Incorrect</span>
<</if>>

<<textbox "$input3" "" autofocus>><<button "Move Satellite">>
    <<replace "#altitude">>Current Altitude: $input3 km<</replace>>
	<<if [String($correct3)].includes($input3.toLowerCase())>>
    	<<replace "#s3">>Nominal<</replace>>
		<<set $status3 to true>>
        <<set $satellite3 to true>>
	<<else>>
    	<<replace "#s3">>Incorrect<</replace>>
		<<set $status3 to false>>
        <<set $satellite3 to false>>
        <<goto "Astronaut Incorrect Screen">>
    <</if>>
<</button>>

[[BACK|Satellite Adjustment]]


:: Satellite Adjustment {"position":"2000,725","size":"100,100"}
<<include "Gameplay Rules">>
Satellite Altitude Interface
Below are the interfaces for the four satellites this spacecraft has access to. Please ensure that they are at the correct altitudes!

Satellite hash: $sat_hash_hex

[[SATELLITE Alpha]]
[[SATELLITE Beta]]
[[SATELLITE Gamma]]
[[SATELLITE Delta]]

<<if $satellite1 is true and $satellite2 is true and $satellite3 is true and $satellite4 is true>>
	<<set $satelliteComplete to true>>
    <<set $completedPuzzles to $completedPuzzles + 1>>
    <span id="success-text">All satellites have been restored to their proper altitudes!</span>
    <<else>>
    <span id="warning-text">The satellites are misaligned!</span>
<</if>>

[[BACK|Command Center]]

<<set $backToPuzzle to "Satellite Puzzle">>


:: Satellite Realignment {"position":"400,1100","size":"100,100"}
"SATELLITE REALIGNMENT"
//Satellites are one of the most important spacecrafts in our daily lives. From naviagation, communication, and weather forecasting in our applications, and scientific research like climate change and our Solar System. Satellites also have thrusters in order to maintain orbit.//

// This spacecraft controls four satellites outside of it, each one responsible for a different function over Earth. These four satellites, unfortunately, are prone to engine/navigation malfunctions from solar flares, and often require remote adjustment to their altitudes. 

// INSTRUCTIONS:

// In order to adjust the satellites, an astronaut will have to change the satellites' altitudes using the provided text field. The astronaut will have to coordinate with you, mission control, in order to properly restore the satellites to their proper orbits. 

// If the altitude text says "Incorrect", adjustment will be needed. Otherwise, if it says "Nominal", then the altitude is correct.

PLEASE ENTER THE SATELLITE HASH BELOW. Your astronaut will have it!
<<textbox "$sat_seed" "" "Correct Altitudes Screen">><<button "Enter">>
	<<goto "Correct Altitudes Screen">>
<</button>>

[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: Solar Panel Repairs {"position":"550,1100","size":"100,100"}
''SOLAR PANEL REPAIR''
//Most spacecraft operating in the Inner Solar System rely on solar panels to generate energy from sunlight. This energy is essential for the crew to carry out critical tasks like communication with the flight controllers, and maintain a livable environment on board, like producing oxygen.//

//Solar panels can be damaged by improper retraction, collisions with large space debris, or prolonged exposure to space radiation.//

//Solar panel repairs will require spacewalk and may cause death//



[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: StarFix: ASTR Seed {"position":"2150,600","size":"100,100"}
<<include "Gameplay Rules">>
<div class="ui-card">
  <h3>Enter Task Code</h3>
  <p class="hint">Ask the Flight Controller for the code and type it below.</p>
  <<textbox "$sf_seed" autocapitalize="off" autocorrect="off">>
  <div class="btnrow">
    <<button "Start Mission">>
      <<if !$sf_seed or $sf_seed.trim()==="">>
        <<replace "#msg">><span class="bad">Please enter the task code.</span><</replace>>
      <<else>>
        <<set $sf_seed = $sf_seed.trim()>>
        <<set $sf_stage = 1>>
        <<set $sf_current = 0>>
        <<goto "StarFix: Scope">>
      <</if>>
    <</button>>
  </div>
  <div id="msg" class="hint"></div>
</div>

[[BACK|Command Center]]

<<set $backToPuzzle to "Stars Puzzle">>


:: StarFix: Check {"position":"2400,600","size":"100,100"}
<<include "Gameplay Rules">>
<<set _pts = genConstellation($sf_seed, $sf_stage)>>
<<set _rec = recommendAngle(_pts)>>
<<set _ok = Math.abs($sf_current - _rec) <= 3>>

<div class="ui-card">
  <<if _ok>>
    <p class="good">Calibration complete! Deviation ≤ 3°.</p>
    <div class="btnrow">
      <<button "continue">>
        <<if $sf_stage >= $sf_totalStages>>
          <<set $starsComplete to true>>
          <<set $completedPuzzles to $completedPuzzles + 1>>
          <<goto "Command Center">>
        <<else>>
          <<set $sf_stage += 1>>
          <<set $sf_current = 0>>
          <<goto "StarFix: Scope">>
        <</if>>
      <</button>>
    </div>
  <<else>>
  	<<silently>><<set $strikes to $strikes - 1>><</silently>>
    <p class="bad">Not aligned yet.</p>
    <div class="btnrow">
      <<button "Return to continue adjustment">><<goto "StarFix: Scope">><</button>>
    </div>
  <</if>>
</div>



:: StarFix: HOU Seed {"position":"1475,1100","size":"100,100"}
''STAR CONSTELLATIONS''
//Throughout history, humanity had use the constellation of stars, also known as celestial navigation, to navigate our planet. Star constellations normally depicting its connections as animals, inanimate objects, or mythological characters to understand where to navigate in the night sky. As of 2025, the International Astronomical Union recognizes 88 constellations//

//Even though we have Global Positioning System (GPS) to navigate, we still use star constellations for any celestial events that are happening. For example, a meteor shower will appear near the constellation Orion the Hunter//

<<set $sf_seed = ("TASK-" + random(1000,9999))>>
<div class="ui-card">
  <h3>Task Code (Tell the Astronaut):</h3>
  <p class="good"><b><<print $sf_seed>></b></p>
  <div class="btnrow">
    <<button "Open the console">>
      <<set $sf_stage = 1>>
      <<goto "StarFix: Houston">>
    <</button>>
  </div>
  <p class="hint">Astronaut should enter this code on their side.</p>
</div>

[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: StarFix: Houston {"position":"1600,1100","size":"100,100"}
<<set _pts = genConstellation($sf_seed, $sf_stage)>>
<<set _rec = recommendAngle(_pts)>>

<div class="ui-card">
  <b>Mission Code:</b> <<print $sf_seed>>
  　<b>Stage:</b> <<print $sf_stage>> / <<print $sf_totalStages>>
</div>

<div id="sf_svg_hou" class="ui-card">Rendering constellation...</div>

<div class="ui-card">
  <p><b>Constellations to be seen (Answer View)</b>: Rendered above.</p>
  <p><b>Recommended heading angle:</b> <span class="good"><<print _rec>>°</span> (Read out to the astronaut)</p>

  <<if $sf_stage >= $sf_totalStages>>
    <p class="good">The astronaut should have completed all stages.</p>
    <div class="btnrow">
      <<button "End Mission">><<goto "OPEN MANUAL">><</button>>
      <<button "Restart Mission">>
        <<set $sf_stage = 1>>
        <<goto "StarFix: Houston">>
      <</button>>
    </div>
  <<else>>
    <div class="btnrow">
      <<button "Next Stage (Click after astronaut passes)">>
        <<set $sf_stage += 1>>
        <<goto "StarFix: Houston">>
      <</button>>
      <<button "Redraw">><<goto "StarFix: Houston">><</button>>
    </div>
  <</if>>
</div>

<script>
(function(){
  const v = (SugarCube.State?.variables || State.variables);
  const pts = genConstellation(v.sf_seed, v.sf_stage);
  const rec = recommendAngle(pts);
  const ptsAns = rotatePts(pts, rec);   // Show the view at the “correct answer” angle
  renderConstellationSVG("sf_svg_hou", ptsAns);
})();
</script>



:: StarFix: Scope {"position":"2275,600","size":"100,100"}
<<include "Gameplay Rules">>
	<<if typeof $sf_stage === 'undefined'>><<set $sf_stage = 1>><</if>>
	<<if typeof $sf_current === 'undefined'>><<set $sf_current = 0>><</if>>
<div class="ui-card">
  <b>Task Code:</b> <<print $sf_seed>>　<b>Flight segment:</b> <<print $sf_stage>>
</div>

<div id="sf_svg_scope" class="ui-card">Loading telescope view…</div>

<div class="ui-card">
  <b>Current angle:</b> <span id="curAngle"><<print $sf_current>>°</span>
  <div class="btnrow">
    <<button "⟲ -10°">>
      <<set $sf_current -= 10>>
      <<replace "#curAngle">><<print $sf_current>>°<</replace>>
      <<script>>
        const v = SugarCube.State.variables;
        const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
        renderConstellationSVG("sf_svg_scope", ptsRot);
      <</script>>
    <</button>>

    <<button "⟲ -5°">>
      <<set $sf_current -= 5>>
      <<replace "#curAngle">><<print $sf_current>>°<</replace>>
      <<script>>
        const v = SugarCube.State.variables;
        const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
        renderConstellationSVG("sf_svg_scope", ptsRot);
      <</script>>
    <</button>>

    <<button "⟲ -1°">>
      <<set $sf_current -= 1>>
      <<replace "#curAngle">><<print $sf_current>>°<</replace>>
      <<script>>
        const v = SugarCube.State.variables;
        const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
        renderConstellationSVG("sf_svg_scope", ptsRot);
      <</script>>
    <</button>>

    <<button "⟳ +1°">>
      <<set $sf_current += 1>>
      <<replace "#curAngle">><<print $sf_current>>°<</replace>>
      <<script>>
        const v = SugarCube.State.variables;
        const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
        renderConstellationSVG("sf_svg_scope", ptsRot);
      <</script>>
    <</button>>

    <<button "⟳ +5°">>
      <<set $sf_current += 5>>
      <<replace "#curAngle">><<print $sf_current>>°<</replace>>
      <<script>>
        const v = SugarCube.State.variables;
        const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
        renderConstellationSVG("sf_svg_scope", ptsRot);
      <</script>>
    <</button>>

    <<button "⟳ +10°">>
      <<set $sf_current += 10>>
      <<replace "#curAngle">><<print $sf_current>>°<</replace>>
      <<script>>
        const v = SugarCube.State.variables;
        const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
        renderConstellationSVG("sf_svg_scope", ptsRot);
      <</script>>
    <</button>>
  </div>

  <div class="btnrow">
    <<button "Check Alignment">><<goto "StarFix: Check">><</button>>
    <<button "Redraw">><<goto "StarFix: Scope">><</button>>
  </div>
  <p class="hint">Coordinate with the Flight Controller’s recommended heading/shape description, then check.</p>
</div>

<script>
(function(){
  const v = SugarCube.State.variables;
  const ptsRot = rotatePts(genConstellation(v.sf_seed, v.sf_stage), v.sf_current);
  renderConstellationSVG("sf_svg_scope", ptsRot);
})();
</script>



:: Start Game {"position":"250,600","size":"100,100"}
<center><h1 id="big-warning">WARNING!!!</h1></center>
<center><h3 class="small-warning">THIS GAME IS NOT MEANT TO BE PLAYED WITH A SINGLE PERSON.</h3></center>
<center><h3 class="small-warning">YOU ARE REQUIRED TO HAVE TWO PLAYERS IN SEPERATE DEVICES TO PLAY THIS GAME.</h3></center>

<center>But of course, you could ignore this warning, I can't stop you.</center>

<center>[[Proceed]]</center>


:: StoryInit {"position":"50,1300","size":"100,100"}
<<set $seconds to 10000>>
<<set $manualSeconds to random(100,150)>>
<<set $fullWater to random(60,100)>>
<<set $lowWater to random(30,40)>>
<<set $strikes to 3>>

<!--To check if the puzzle is completed-->
<<set $completedPuzzles to 0>>
<<set $numOfPuzzles to 5>>

<<set $waterComplete to false>>
<<set $toiletComplete to false>>
<<set $starsComplete to false>>
<<set $satelliteComplete to false>>
<<set $computerComplete to false>>

<!--Toilet Puzzle-->
<<silently>><<set $arrayCodes = ["1A", "4C", "7D", "5B"]>>
<<set $code = $arrayCodes.random()>>

<<if $code == "1A">>
	<<set $correct = "Fix Sensor">>
<<elseif $code == "4C">>
	<<set $correct = "Fix Pump">>
<<elseif $code == "7D">>
	<<set $correct = "Fix Leakage">>
<<elseif $code == "5B">>
	<<set $correct = "No Fix">>
<</if>>
<</silently>>

<!--Water Puzzle-->
<<silently>>
<<set $leftArrayCodes = ["7B", "2T", "9A", "3C","4G"]>>
<<set $rightArrayCodes = ["9Z", "1A"]>>
<<set $leftCode = $leftArrayCodes.random()>>
<<set $rightCode = $rightArrayCodes.random()>>

<<if $leftCode == "7B">>
	<<set $leftCorrect = "Fix Pump">>
<<elseif $leftCode == "2T">>
	<<set $leftCorrect = "Fix Filter">>
<<elseif $leftCode == "9A">>
	<<set $leftCorrect = "Fix SD Card">>
<<elseif $leftCode == "3C">>
	<<set $leftCorrect = "Fix Sensor">>
<<elseif $leftCode == "4G">>
	<<set $leftCorrect = "No Fix">>
<</if>>

<<if $rightCode == "9Z">>
	<<set $rightCorrect = "No Refill">>
<<elseif$leftCode == "1A">>
	<<set $rightCorrect = "Request Refill">>
<</if>>
<</silently>>

<<silently>>
<<if $rightCode == "9Z">>
	<<set $rightCorrect = "No Refill">>
<<elseif $rightCode == "1A">>
	<<set $rightCorrect = "Request Refill">>
<</if>>
<</silently>>


<<set $victoryPassage to "Victory Screen">>
<<set $gameOverPassage to "Game Over">>

<!-- for satellite puzzle-->

<<set $input1 to random(300, 1400)>>
<<set $input2 to random(300, 1400)>>
<<set $input3 to random(300, 1400)>>
<<set $input4 to random(300, 1400)>>

<<set $rng to seedRand($sat_hash)>>

<<set $correct1 to Math.floor($rng()*1100 + 300)>>
<<set $correct2 to Math.floor($rng()*1100 + 300)>>
<<set $correct3 to Math.floor($rng()*1100 + 300)>>
<<set $correct4 to Math.floor($rng()*1100 + 300)>>

<<set $satellite1 to false>>
<<set $satellite2 to false>>
<<set $satellite3 to false>>
<<set $satellite4 to false>>

\:: StoryInit
<<set $sf_totalStages = 3>>  /* 想改成几段就改这里 */

<!--Computer Failure Puzzle-->
<<set $computerRandIdx to random(0,3)>>

<<set $computerCodesArr = ["HOUSTON", "ORLANDO", "BARSTOW", "HAMPTON"]>>
<<set $houstonArr = ["SUOTNHO", "OHTONUS", "UTHSONO"]>>
<<set $orlandoArr = ["LODONRA", "ADOORLN", "DRALONO"]>>
<<set $barstowArr = ["SOBTAWR", "ARTSWOB", "RTAOWBS"]>>
<<set $hamptonArr = ["ANTHPOM", "NOAMHPT", "OMPNHTA"]>>

<<set $houstonMaskedArr = ["\\* * U * T O *", "\\* * U * T O *", "\\* O * * T O * ", "\\* * * S T O *"]>>
<<set $orlandoMaskedArr = ["\\* R * * N D *", "\\* * L * N D *", "\\* R * A * D *", "\\* * L * N D *"]>>
<<set $barstowMaskedArr = ["\\* * R * T O *", "\\* A * * T O *", "\\* A * * T O *", "\\* * R S T * *"]>>
<<set $hamptonMaskedArr = ["\\* A M P * O *", "\\* * M P T * *", "\\* A M * T O *", "\\* * * P T O *"]>>

<<set $ahouston = $houstonArr.random()>>
<<set $aorlando = $orlandoArr.random()>>
<<set $abarstow = $barstowArr.random()>>
<<set $ahampton = $hamptonArr.random()>>

<<set $mhouston = $houstonMaskedArr.random()>>
<<set $morlando = $orlandoMaskedArr.random()>>
<<set $mbarstow = $barstowMaskedArr.random()>>
<<set $mhampton = $hamptonMaskedArr.random()>>

<<set $computerCorrect = $computerCodesArr[$computerRandIdx]>>

<<if $computerCorrect == "HOUSTON">>
<center><pre><<print $mhouston>></pre></center>
<<elseif $computerCorrect == "ORLANDO">>
<center><pre><<print $morlando>></pre></center>
<<elseif $computerCorrect == "BARSTOW">>
<center><pre><<print $mbarstow>></pre></center>
<<elseif $computerCorrect == "HAMPTON">>
<center><pre><<print $mhampton>></pre></center>
<</if>>



:: Strikes {"position":"50,900","size":"100,100"}
<span id="strikes">Strike(s): $strikes</span><<silently>>
<<if $strikes == 0>> <<goto "Game Over">><</if>><</silently>>


:: Timer {"position":"50,1000","size":"100,100"}
<span id="countdown">The spacecraft will explode in $seconds seconds.</span>
<<silently>>
    <<repeat 1s>>
        <<set $seconds to $seconds - 1>>
        <<if $seconds gt 0>>
            <<replace "#countdown">>The spacecraft will explode in $seconds seconds.<</replace>>
        <<else>>
			<<replace "#countdown">><</replace>>
			<<goto "Game Over">>
			<<stop>>
        <</if>>
    <</repeat>>
 <!-- This sample code was take from Twine SugarCube: Timed Passage with modifications--><</silently>>


:: Toilet Puzzle {"position":"1350,250","size":"100,100"}
<<include "Timer">>
<<include "Strikes">>
<<silently>><<include "Victory Check">><</silently>>
<center>DORMITORY TOILET REPAIR</center>
<center><img src="https://blog.museumofflight.org/hubfs/Space%20toilet1.jpg" width="500" height="400" alt="Placeholder Title Image" /></center>

<center>The error code that the toilet is displaying is</center>
<center><h1 id="big-warning"><<=$code>></h1></center>
<<if $correct == "Fix Sensor">>
	<center>[[Fix Sensor|Dorm Toilet]]</center>
	<center>[[Fix Leakage|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>

<<elseif $correct == "Fix Leakage">>
	<center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Leakage|Dorm Toilet]]</center>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>

<<elseif $correct == "Fix Pump">>
	<center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Leakage|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Pump|Dorm Toilet]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>

<<elseif $correct == "No Fix">>
	<center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Leakage|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Dorm Toilet]]</center>
<</if>>

<<set $backToPuzzle to "Toilet Puzzle">>
<<set $toiletComplete to true>>


:: Toilet Repair {"position":"1000,1100","size":"100,100"}
''TOILET REPAIR''
//Also known as "space toilets" or "zero gravity toilets," it uses airflow and vacuums to collect liquid and solid waste to reduce bacteria inside the spacecraft//

//Do I need to explain why astronauts would need to have a toilet in their spacecraft?//

//If the toilet is malfunctioning, it could be due to three reasons
* Pumping Issue
* Sensor Issue
* Leaking Issue

//Please ask your astronaut for the error code. 
//NOTE: CASE SENSITIVE 
Enter Code:<<textbox "$code" "" "Toilet Repair Result">><<button "Enter">>
	<<goto "Toilet Repair Result">>
<</button>>

[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: Toilet Repair Result {"position":"1000,1225","size":"100,100"}
<<if $code == "4C">>
There is a pumping issue in the toilet.
Ask your astronaut to fix it.
[[BACK|Toilet Repair]]
<<elseif$code == "1A">>
There is a sensor issue in the toilet.
Ask your astronaut to fix it.
[[BACK|Toilet Repair]]
<<elseif$code == "7D">>
There is a leaking issue in the toilet.
Ask your astronaut to fix it.
[[BACK|Toilet Repair]]
<<elseif$code == "5B">>
There is no issue with the toilet.
But your astronaut still need to select "No Fix".
[[BACK|Toilet Repair]]
<<else>>
This is an invalid code.
Ask your astronaut to double check.
[[BACK|Toilet Repair]]
<</if>>


:: Victory Check {"position":"150,1300","size":"100,100"}
$completedPuzzles / $numOfPuzzles puzzles completed<<silently>><<if $completedPuzzles == $numOfPuzzles>> <<goto "Victory Screen">><</if>><</silently>>


:: Victory Screen {"position":"300,400","size":"100,100"}
<center><h1 id="win-text">YOU WIN!!!</h1></center>

<center>Your spacecraft is now in stable conditions and you should celebrate with your flight controller</center>
<center>And if you are playing solo, well I don't know what to say. Congrats?</center>

<center>But something is over there, something bright.</center>

<center>[[Back to Menu]]</center>


:: Water Recycling Machine Puzzle 1/2 {"position":"1350,400","size":"100,100"}
<<include "Timer">>
<<include "Strikes">>
<<silently>><<include "Victory Check">><</silently>>
<center>MESS ROOM</center>
<center><img src="https://cdn.zmescience.com/wp-content/uploads/2014/11/table.jpg" width="500" height="400"  alt="Placeholder Title Image" /></center>

<center>The error code that the water recycling machine is displaying is</center>
<center><h1 id="big-warning"><<=$leftCode + $rightCode>></h1></center>
<<if $leftCorrect == "Fix Pump">>
	<center>[[Fix Pump|Water Recycling Machine Puzzle 2/2]]</center>
	<center>[[Fix Filter|Astronaut Incorrect Screen]]</center>
	<center>[[Fix SD|Astronaut Incorrect Screen]]</center>
    <center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>

<<elseif $leftCorrect == "Fix Filter">>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Filter|Water Recycling Machine Puzzle 2/2]]</center>
	<center>[[Fix SD|Astronaut Incorrect Screen]]</center>
    <center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>

<<elseif $leftCorrect == "Fix SD Card">>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Filter|Astronaut Incorrect Screen]]</center>
	<center>[[Fix SD|Water Recycling Machine Puzzle 2/2]]</center>
    <center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>
    
<<elseif $leftCorrect == "Fix Sensor">>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Filter|Astronaut Incorrect Screen]]</center>
	<center>[[Fix SD|Astronaut Incorrect Screen]]</center>
    <center>[[Fix Sensor|Water Recycling Machine Puzzle 2/2]]</center>
	<center>[[No Fix|Astronaut Incorrect Screen]]</center>

<<elseif $leftCorrect == "No Fix">>
	<center>[[Fix Pump|Astronaut Incorrect Screen]]</center>
	<center>[[Fix Filter|Astronaut Incorrect Screen]]</center>
	<center>[[Fix SD|Astronaut Incorrect Screen]]</center>
    <center>[[Fix Sensor|Astronaut Incorrect Screen]]</center>
	<center>[[No Fix|Water Recycling Machine Puzzle 2/2]]</center>
<</if>>

<<set $backToPuzzle to "Water Puzzle1">>


:: Water Recycling Machine Puzzle 2/2 {"position":"1200,400","size":"100,100"}
<<include "Timer">>
<<include "Strikes">>
<<silently>><<include "Victory Check">><</silently>>
<center>MESS ROOM</center>
<center><img src="https://cdn.zmescience.com/wp-content/uploads/2014/11/table.jpg" width="500" height="400" alt="Placeholder Title Image" /></center>

<center>The error code that the water recycling machine is displaying is</center>
<center><h1 id="big-warning"><<=$leftCode + $rightCode>></h1></center>

<<if $rightCorrect == "No Refill">>
	<center>[[No Refill|Mess Hall]]</center>
	<center>[[Request Resupply|Astronaut Incorrect Screen]]</center>

<<elseif $rightCorrect == "Request Refill">>
	<center>[[No Refill|Astronaut Incorrect Screen]]</center>
	<center>[[Request Resupply|Mess Hall]]</center>
<</if>>

<<set $backToPuzzle to "Water Puzzle2">>

<!--To check if the puzzle is completed-->
<<set $waterComplete to true>>


:: Water Recycling Machine Repair {"position":"1150,1100","size":"100,100"}
''WATER RECYCLING MACHINE REPAIR''
//The Water Recycling Machine is our spacecraft is vital for our astronauts for hydration, hygiene, research, food rehydration, and more. Additionally, it is one of the most powerful water filtration system that can filter wastewater sources, like urine or sweat, into drinkable, (and also the most purest), water for our astronauts to survive.//

//In 2023, NASA reported that the ISS were able to recycled 98 percent of their wastewater, a major enginnering achivement that helps reducing the needs of continuous resupply missions to transport water.//

//And no, our astronauts aren't drinking urine in space//

//NOTE: Enter only TWO CHARACTERS AT A TIME in the text box below
//The first two characters revals the malfunction error. The last two code will tells if water needs to be refilled.

//If the water recycling machine is malfunctioning, it could be due to four reasons
* Pumping Issue
* Filtration Issue
* SD Card Issue
* Sensor Issue

//It's important to check if the water recycling machine have enough water.
* More than 50%, no need for water resupply mission
* Less than 50%, time to start a water resupply mission

//Please ask your astronaut for the error code.
//NOTE: CASE SENSITIVE
Enter Code:<<textbox "$code" "" "Water Recycling Machine Result">><<button "Enter">>
	<<goto "Water Recycling Machine Result">>
<</button>>



[[BACK|OPEN MANUAL]]
<<include 'Manual Timer'>>


:: Water Recycling Machine Result {"position":"1150,1225","size":"100,100"}
<<if $code == "7B">>
There is a pumping issue in the water recycling system.
Ask your astronaut to fix it.
[[BACK|Water Recycling Machine Repair]]
<<elseif$code == "2T">>
There is a filtration issue in the water recycling system.
Ask your astronaut to fix it.
[[BACK|Water Recycling Machine Repair]]
<<elseif$code == "9A">>
There is a SD Card issue in the water recycling system.
Ask your astronaut to fix it.
[[BACK|Water Recycling Machine Repair]]
<<elseif$code == "3C">>
There is a sensor issue in the water recycling system.
Ask your astronaut to fix it.
[[BACK|Water Recycling Machine Repair]]
<<elseif$code == "4G">>
There is no issue with the water recycling system.
But your astronaut still need to select "No Fix".
[[BACK|Water Recycling Machine Repair]]
<<elseif$code == "9Z">>
It's displaying $fullWater %
There is no need to refill the water recycling system
But your astronaut still need to select "No Refill".
[[BACK|Water Recycling Machine Repair]]
<<elseif$code == "1A">>
It's displaying $lowWater %
There is a need to refill the water recycling system
Ask your astronaut to request a resupply mission.
[[BACK|Water Recycling Machine Repair]]
<<else>>
This is an invalid code.
Ask your astronaut to double check.
[[BACK|Water Recycling Machine Repair]]
<</if>>


:: StoryScript [script]
Config.history.controls = false;
	/* ==== StarFix: seeded constellation module ==== */
/* 1) 固定种子随机 */
window.seedRand = function(seed){
  let h=1779033703^seed.length;
  for (let i=0;i<seed.length;i++) {
    h = Math.imul(h ^ seed.charCodeAt(i), 3432918353);
    h = (h<<13)|(h>>>19);
  }
  return function(){
    h = Math.imul(h ^ (h>>>16), 2246822507);
    h = Math.imul(h ^ (h>>>13), 3266489909);
    h = (h ^ (h>>>16)) >>> 0;
    return h / 4294967296;
  };
};

/* 2) 基于 seed + stage 生成“星座”点列（简单折线） */
window.genConstellation = function(seed, stage){
  const rng = seedRand(seed + "|" + stage);
  const n = 5 + Math.floor(rng()*3); // 5~7 个点
  const pts = [];
  for(let i=0;i<n;i++){
    pts.push({ x: Math.floor(rng()*80 - 40), y: Math.floor(rng()*80 - 40) });
  }
  pts.sort((a,b)=>a.x-b.x);
  return pts;
};

/* 3) 推荐角度（将平均朝向调回水平） */
window.recommendAngle = function(pts){
  if(!pts || !pts.length) return 0;
  const angs = [];
  for(let i=1;i<pts.length;i++){
    const dx = pts[i].x - pts[i-1].x;
    const dy = pts[i].y - pts[i-1].y;
    angs.push(Math.atan2(dy, dx));
  }
  const avg = angs.reduce((a,b)=>a+b,0)/angs.length;
  return Math.round(-avg * 180/Math.PI);
};

/* 4) 旋转点列 */
window.rotatePts = function(pts, deg){
  const rad = deg * Math.PI/180;
  const cos = Math.cos(rad), sin = Math.sin(rad);
  return pts.map(p => ({
    x: Math.round(p.x*cos - p.y*sin),
    y: Math.round(p.x*sin + p.y*cos)
  }));
};

/* 5) 渲染为 SVG */
window.renderConstellationSVG = function(containerId, pts, opts = {}){
  const scale = opts.scale ?? 3;
  const w = 300, h = 300, cx = Math.round(w/2), cy = Math.round(h/2);
  const toPath = (arr)=>arr.map((p,i)=>{
    const X = cx + p.x*scale, Y = cy - p.y*scale;
    return (i===0?`M ${X} ${Y}`:`L ${X} ${Y}`);
  }).join(" ");
  const stars = (arr)=>arr.map(p=>{
    const X = cx + p.x*scale, Y = cy - p.y*scale;
    return `<circle cx="${X}" cy="${Y}" r="2"></circle>`;
  }).join("");
  const path = toPath(pts);
  const svg = `
    <svg viewBox="0 0 ${w} ${h}" width="${w}" height="${h}">
      <rect x="0" y="0" width="${w}" height="${h}" class="sky-bg"></rect>
      <g><path d="${path}" class="star-link" fill="none"></path>${stars(pts)}</g>
      <circle cx="${cx}" cy="${cy}" r="4" class="reticle"></circle>
    </svg>`;
  const el = document.getElementById(containerId);
  if(el){ el.innerHTML = svg; }
};

// 让 State 在任何 SugarCube 2 环境都可用
(function(){
  if (typeof window.State === 'undefined' && window.SugarCube && SugarCube.State) {
    window.State = SugarCube.State;
  }
})();


// satellite puzzle (using richard's generator!)

let sat_hash = Math.floor(Math.random() * 10000000);
State.variables.sat_hash = sat_hash;
let sat_hash_hex = sat_hash.toString(16).toUpperCase();
State.variables.sat_hash_hex = sat_hash_hex;

window.setSatellites = function (seedHex) {
  const seed = parseInt(seedHex, 16);
  const rng = seedRand(seed);
  State.variables.correct1 = Math.floor(rng()*1100 + 300);
  State.variables.correct2 = Math.floor(rng()*1100 + 300);
  State.variables.correct3 = Math.floor(rng()*1100 + 300);
  State.variables.correct4 = Math.floor(rng()*1100 + 300);
}

:: StoryStylesheet [stylesheet]
#menu-saves, #menu-restart {
	display: none;
}

#menu-core {
	display: none;
}

#menu-item-saves, #menu-item-restart {
	display: none;
}

#begin-button a {
  	font-size: 20px;
  	font-weight: bold;
	color: red;
}

#big-warning {
	color: yellow;
}

#lose-text {
	color: red;
}

#win-text {
	color: lime;
}

#success-text, #win-text {
	color: lime;
}

#warning-text {
 	color: orange; 
}

.small-warning {
  	margin: 0px;
	padding: 1px;
  	line-height: 20%;
}

a.yellow-link {
    color: yellow;
}

#completed-text {
    color: palegreen;
}

/* ==== StarFix styles ==== */
.sky-bg { fill: #0b1020; }
.star-link { stroke: #7fd0ff; stroke-width: 2; }
svg circle { fill: #fff; }
.reticle { fill: none; stroke: #ffd54a; stroke-width: 1.5; }
.ui-card { border: 1px solid #2b2f45; border-radius: 10px; padding: 12px; margin: 10px 0; background: #121422; }
.btnrow button { margin-right: 6px; margin-bottom: 6px; }
.hint { color: #9ad; }
.bad { color: #f88; }
.good { color: #9f9; }